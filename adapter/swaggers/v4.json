{
    "swagger": "2.0",
    "basePath": "/apiv4",
    "paths": {
        "/geo_temporal_query/{dataset}": {
            "parameters": [
                {
                    "enum": [
                        "agb-quarterly", 
                        "chirps_final_05-daily", 
                        "chirps_final_25-daily", 
                        "chirps_prelim_05-daily", 
                        "copernicus_ocean_salinity_0p5_meters-daily", 
                        "copernicus_ocean_salinity_109_meters-daily", 
                        "copernicus_ocean_salinity_1p5_meters-daily", 
                        "copernicus_ocean_salinity_25_meters-daily", 
                        "copernicus_ocean_salinity_2p6_meters-daily", 
                        "copernicus_ocean_sea_level-daily", 
                        "copernicus_ocean_temp_1p5_meters-daily", 
                        "copernicus_ocean_temp_6p5_meters-daily", 
                        "cpc_precip_global-daily", 
                        "cpc_precip_us-daily", 
                        "cpc_temp_max-daily", 
                        "cpc_temp_min-daily", 
                        "deforestation-quarterly", 
                        "era5_2m_temp-hourly", 
                        "era5_land_precip-hourly", 
                        "era5_land_surface_pressure-hourly", 
                        "era5_precip-hourly", 
                        "era5_surface_solar_radiation_downwards-hourly", 
                        "era5_wind_100m_u-hourly", 
                        "era5_wind_100m_v-hourly", 
                        "era5_wind_10m_u-hourly", 
                        "era5_wind_10m_v-hourly", 
                        "prism-precip-daily", 
                        "prism-tmax-daily", 
                        "prism-tmin-daily", 
                        "vhi-weekly"
                    ],
                    "in": "path",
                    "description": "select a dataset",
                    "name": "dataset",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "500": {
                        "description": "unknown error"
                    },
                    "404": {
                        "description": "invalid dataset or coordinate"
                    },
                    "200": {
                        "description": "json with weather data for coordinate"
                    }
                },
                "summary": "get history from geotemporal dataset",
                "operationId": "get history from geotemporal dataset",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "type": "string",
                        "format": "password"
                    },
                    {
                        "name": "also_return_metadata",
                        "in": "query",
                        "type": "boolean",
                        "description": "set to true to return dataset metadata",
                        "default": false
                    },
                    {
                        "name": "use_imperial_units",
                        "in": "query",
                        "type": "boolean",
                        "description": "set to 'true' by default",
                        "default": true
                    },
                    {
                        "name": "desired_units",
                        "in": "query",
                        "type": "string",
                        "description": "override use_imperial_units and attempt to convert the result into the specified  unit"
                    },
                    {
                        "name": "also_return_snapped_coordinates",
                        "in": "query",
                        "type": "boolean",
                        "description": "set to 'true' by default",
                        "default": false
                    },
                    {
                        "name": "convert_to_local_time",
                        "in": "query",
                        "type": "boolean",
                        "description": "set to 'true' by default",
                        "default": true
                    },
                    {
                        "name": "as_of",
                        "in": "query",
                        "type": "string",
                        "format": "date-time",
                        "description": "Truncate updates generated after `as_of`"
                    }
                ],
                "produces": [
                    "text/csv",
                    "application/json"
                ],
                "tags": [
                    "Geotemporal Dataset History"
                ]
            }
        }
    },
    "info": {
        "title": "dClimate API",
        "version": "v4",
        "description": "<center> <h2>  Get decentralized weather data from dClimate IPFS Database. Using dWeather-Python-Client version: <b>2.1.3</b></h2> </center>\n\n---\n&nbsp;\n#### Getting started:\n#### [API Registration](https://api.dclimate.net/register)\n#### [API Usage Manual](https://github.com/dClimate/dClimate-API-Manual)\n#### [dClimate API Walkthough](https://www.youtube.com/watch?v=qrtGGbvLj40)\n&nbsp;\n#### Learn more about dClimate:\n#### [dClimate Home Page](https://www.dclimate.net/)\n#### [dClimate Github](https://github.com/dClimate)\n&nbsp;\n#### Data and Privacy:\n#### [dClimate API US Privacy Policy](https://api.dclimate.net/apiv3/privacy)\n#### [dClimate API GDPR Privacy Policy](https://api.dclimate.net/apiv3/privacy/gdpr)\n&nbsp;\n<center> <h2> API Documentation: </h2> </center>\n---"
    },
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "tags": [
        {
            "name": "Geotemporal Dataset History"
        }
    ],
    "responses": {
        "ParseError": {
            "description": "When a mask can't be parsed"
        },
        "MaskError": {
            "description": "When any error occurs on mask"
        }
    }
}